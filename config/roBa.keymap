#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// OS設定を日本語キーボードのまま使用するための変換定義

#define JP_DQUOTE       AT                // "
#define JP_AMPERSAND    CARET             // &
#define JP_QUOTE        AMPERSAND         // '
#define JP_EQUAL        UNDER             // =
#define JP_CARET        EQUAL             // ^
#define JP_YEN          0x89              // ¥
#define JP_PLUS         COLON             // +
#define JP_TILDE        PLUS              // ~
#define JP_PIPE         LS(0x89)          // |
#define JP_AT           LEFT_BRACKET      // @
#define JP_COLON        SINGLE_QUOTE      // :
#define JP_ASTERISK     DOUBLE_QUOTES     // *
#define JP_BACKQUOTE    LEFT_BRACE        // `
#define JP_UNDERSCORE   LS(0x87)          // _
#define JP_LBRACKET     RIGHT_BRACKET     // [
#define JP_RBRACKET     BACKSLASH         // ]
#define JP_LPAREN       ASTERISK          // (
#define JP_RPAREN       LEFT_PARENTHESIS  // )
#define JP_LBRACE       RIGHT_BRACE       // {
#define JP_RBRACE       PIPE              // }
#define JP_KANA         LANGUAGE_1        // かな
#define JP_EISU         LANGUAGE_2        // 英数
#define JP_HANZEN       GRAVE             // 半角/全角

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q               &kp W         &kp E         &kp R                   &kp T                                            &kp Y            &kp U  &kp I      &kp O    &kp P
&kp A               &kp S         &kp D         &kp F                   &kp G        &kp LS(LG(S))         &kp SEMI      &kp H            &kp J  &kp K      &kp L    &kp ENTER
&lt_to_layer_0 3 Z  &kp X         &kp C         &kp V                   &kp B        &to 2                 &kp MINUS     &kp N            &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp ESCAPE          &kp LEFT_WIN  &kp LEFT_ALT  &mt LEFT_CONTROL SPACE  &lt 2 SPACE  &lt 2 LANGUAGE_2      &kp INT_KANA  &lt 1 BACKSPACE                             &to 5
            >;

            sensor-bindings = <&inc_dec_kp PAGE_DOWN PAGE_UP>;
        };

        FUNCTION {
            bindings = <
&kp ESCAPE      &kp F2  &trans  &kp F4  &trans                                  &kp RBKT  &kp NON_US_HASH  &kp UP_ARROW  &kp F10    &trans
&trans          &trans  &trans  &trans  &trans  &trans            &bt BT_SEL 0  &trans    &kp LEFT         &kp DOWN      &kp RIGHT  &trans
&kp LEFT_SHIFT  &trans  &trans  &trans  &trans  &bt BT_SEL 2      &bt BT_SEL 1  &trans    &trans           &trans        &trans     &trans
&trans          &trans  &trans  &trans  &trans  &trans            &trans        &trans                                              &trans
            >;
        };

        NUM {
            bindings = <
&trans  &trans       &kp KP_N7  &kp KP_N8  &kp KP_NUMBER_9                                              &kp ASTERISK       &kp LEFT_PARENTHESIS  &trans      &trans  &kp PERCENT
&trans  &kp KP_PLUS  &kp KP_N4  &kp KP_N5  &kp KP_N6        &kp LC(LA(KP_NUMBER_0))      &trans         &kp DOUBLE_QUOTES  &trans                &trans      &trans  &trans
&trans  &kp KP_N0    &kp KP_N1  &kp KP_N2  &kp KP_N3        &to 0                        &kp LS(MINUS)  &trans             &kp HASH              &kp DOLLAR  &trans  &trans
&trans  &trans       &trans     &trans     &trans           &trans                       &trans         &trans                                                       &trans
            >;
        };

        SHIFT {
            bindings = <
&kp LS(Q)  &kp LS(W)  &kp LS(E)  &kp LS(R)  &kp LS(T)                            &kp LS(Y)  &kp LS(U)  &kp LS(I)      &kp LS(O)       &kp LS(P)
&kp LS(A)  &kp LS(S)  &kp LS(D)  &kp LS(F)  &kp LS(G)  &trans      &kp LS(SEMI)  &kp LS(H)  &kp LS(J)  &kp LS(K)      &kp LS(L)       &trans
&kp LS(Z)  &kp LS(X)  &kp LS(C)  &kp LS(V)  &kp LS(B)  &trans      &kp UNDER     &kp LS(N)  &kp LS(M)  &kp LS(COMMA)  &kp LS(PERIOD)  &kp LS(SLASH)
&trans     &trans     &trans     &trans     &trans     &trans      &kp LBKT      &trans                                               &kp B
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans    &trans    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &to 0       &trans  &trans  &mkp MB1  &mkp MB2  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                              &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &to 0       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &to 0
            >;
        };
    };
};
